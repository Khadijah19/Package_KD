dim(base_ehcvm)
##Suppression de la variable temporaire
base_ehcvm$t <- NULL
return(base_ehcvm)
}
cereales <- read_dta("C:/Users/HP/OneDrive/1231116193333-Desktop/Desktop/ISEPcoursR2024/Exos_Céréales/cereales.dta")
cereales <- preparation_base(cereales)
View(cereales)
qtty_achat <- function(viandes){
#Importation de la base table de conversion
library(readr)
table_de_conversion <<- read_delim(file.choose(), ";")
#------------------Calcul de la quantité consommée en kg----------------------------------
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
###Nous pouvons maintenant fusionner la base viandes et la base table_de_conversion par la variable real_id
viandes1 <- merge(viandes, table_de_conversion, by= "real_id_cons", all.x = TRUE)
###Nous pouvons à présent créer la variable qui va calculer la consommation totale
viandes1$Qtty_cons<- as.numeric(viandes1$Qtty_cons)
viandes1$poids<- as.numeric(viandes1$poids)
viandes1$qtotale_conso <-viandes1$Qtty_cons*viandes1$poids/1000
viandes <- viandes1
}
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
# Ensure the key columns are characters for consistent merging
viandes$produitID <- as.character(viandes$produitID)
viandes$uniteID <- as.character(viandes$uniteID)
viandes$tailleID <- as.character(viandes$tailleID)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
viandes$real_id_cons <- paste(viandes$produitID, viandes$uniteID, viandes$tailleID)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Convert Qtty_cons and poids to numeric
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
}
# Example usage:
# cereales <- qtty_achat(cereales)
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
# Ensure the key columns are characters for consistent merging
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
viandes$real_id_cons <- paste(viandes$produitID, viandes$uniteID, viandes$tailleID)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Convert Qtty_cons and poids to numeric
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
}
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
# Ensure the key columns are characters for consistent merging
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
viandes$real_id_cons <- paste(viandes$produitID, viandes$uniteID, viandes$tailleID)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Convert Qtty_cons and poids to numeric
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
viandes <- viandes1
}
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
# Ensure the key columns are characters for consistent merging
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
viandes$real_id_cons <- paste(viandes$produitID, viandes$uniteID, viandes$tailleID)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Convert Qtty_cons and poids to numeric
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
viandes <- viandes1
}
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
# Print the structure of the conversion table to understand its columns
print(str(table_de_conversion))
# Ensure the key columns are characters for consistent merging
viandes$produitID <- as.character(viandes$produitID)
viandes$uniteID <- as.character(viandes$uniteID)
viandes$tailleID <- as.character(viandes$tailleID)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
viandes$real_id_cons <- paste(viandes$produitID, viandes$uniteID, viandes$tailleID)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Print the structure of the merged data to check for any issues
print(str(viandes1))
# Convert Qtty_cons and poids to numeric, handling potential issues with NA values
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Check for missing values in Qtty_cons and poids
if (any(is.na(viandes1$Qtty_cons))) {
stop("Qtty_cons column contains NA values after conversion to numeric.")
}
if (any(is.na(viandes1$poids))) {
stop("poids column contains NA values after conversion to numeric.")
}
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
}
# Example usage:
# cereales <- qtty_achat(cereales)
cereales <- read_dta("C:/Users/HP/OneDrive/1231116193333-Desktop/Desktop/ISEPcoursR2024/Exos_Céréales/cereales.dta")
cereales <- preparation_base(cereales)
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
# Print the structure of the conversion table to understand its columns
print(str(table_de_conversion))
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
viandes$real_id_cons <- paste(viandes$produitID, viandes$uniteID, viandes$tailleID)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Print the structure of the merged data to check for any issues
print(str(viandes1))
# Convert Qtty_cons and poids to numeric, handling potential issues with NA values
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Check for missing values in Qtty_cons and poids
if (any(is.na(viandes1$Qtty_cons))) {
stop("Qtty_cons column contains NA values after conversion to numeric.")
}
if (any(is.na(viandes1$poids))) {
stop("poids column contains NA values after conversion to numeric.")
}
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
}
# Example usage:
# cereales <- qtty_achat(cereales)
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
# Print the structure of the conversion table to understand its columns
print(str(table_de_conversion))
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Print the structure of the merged data to check for any issues
print(str(viandes1))
# Convert Qtty_cons and poids to numeric, handling potential issues with NA values
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Check for missing values in Qtty_cons and poids
if (any(is.na(viandes1$Qtty_cons))) {
stop("Qtty_cons column contains NA values after conversion to numeric.")
}
if (any(is.na(viandes1$poids))) {
stop("poids column contains NA values after conversion to numeric.")
}
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
}
# Example usage:
cereales <- qtty_achat(cereales)
cereales <- read_dta("C:/Users/HP/OneDrive/1231116193333-Desktop/Desktop/ISEPcoursR2024/Exos_Céréales/cereales.dta")
preparation_base <- function(base_ehcvm) {
colnames(base_ehcvm)[4:14] <- c("AutresCereales","Qtty_cons",
"Unite_cons","Taille_cons",
"AutoCons","AutresProv",
"DernierAchat","Qtty_achat",
"Unite_achat","Taille_achat",
"Value_achat")
##Gestion des NA
##Suppression des ménages ne consommant pas de céréales
##Création d'une variable temporaire
base_ehcvm$t <- ifelse(is.na(base_ehcvm$Qtty_cons)==1,1,0)
##Suppression des ménages n'ayant pas déclaré les quantités consommées
base_ehcvm <- base_ehcvm[base_ehcvm$t==0,]
dim(base_ehcvm)
##Suppression de la variable temporaire
base_ehcvm$t <- NULL
return(base_ehcvm)
}
cereales <- preparation_base(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_cs(file.choose(), ";", show_col_types = FALSE)
# Print the structure of the conversion table to understand its columns
print(str(table_de_conversion))
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Print the structure of the merged data to check for any issues
print(str(viandes1))
# Convert Qtty_cons and poids to numeric, handling potential issues with NA values
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Check for missing values in Qtty_cons and poids
if (any(is.na(viandes1$Qtty_cons))) {
stop("Qtty_cons column contains NA values after conversion to numeric.")
}
if (any(is.na(viandes1$poids))) {
stop("poids column contains NA values after conversion to numeric.")
}
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
viandes <- viandes1
}
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_csv2(file.choose(), ";", show_col_types = FALSE)
# Print the structure of the conversion table to understand its columns
print(str(table_de_conversion))
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Print the structure of the merged data to check for any issues
print(str(viandes1))
# Convert Qtty_cons and poids to numeric, handling potential issues with NA values
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Check for missing values in Qtty_cons and poids
if (any(is.na(viandes1$Qtty_cons))) {
stop("Qtty_cons column contains NA values after conversion to numeric.")
}
if (any(is.na(viandes1$poids))) {
stop("poids column contains NA values after conversion to numeric.")
}
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
viandes <- viandes1
}
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_csv2(file.choose(), ",", show_col_types = FALSE)
# Print the structure of the conversion table to understand its columns
print(str(table_de_conversion))
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Print the structure of the merged data to check for any issues
print(str(viandes1))
# Convert Qtty_cons and poids to numeric, handling potential issues with NA values
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Check for missing values in Qtty_cons and poids
if (any(is.na(viandes1$Qtty_cons))) {
stop("Qtty_cons column contains NA values after conversion to numeric.")
}
if (any(is.na(viandes1$poids))) {
stop("poids column contains NA values after conversion to numeric.")
}
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
viandes <- viandes1
}
# Example usage:
cereales <- qtty_achat(cereales)
qtty_achat <- function(viandes){
# Load necessary library
library(readr)
# Import the conversion table
table_de_conversion <- read_csv2(file.choose(), ",", show_col_types = FALSE)
# Print the structure of the conversion table to understand its columns
print(str(table_de_conversion))
viandes$real_id_cons <- paste(viandes[, 3], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$produitID <- as.character(table_de_conversion$produitID)
table_de_conversion$uniteID <- as.character(table_de_conversion$uniteID)
table_de_conversion$tailleID <- as.character(table_de_conversion$tailleID)
# Create the unique ID for both datasets
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
# Merge the datasets on real_id_cons
viandes1 <- merge(viandes, table_de_conversion, by = "real_id_cons", all.x = TRUE)
# Print the structure of the merged data to check for any issues
print(str(viandes1))
# Convert Qtty_cons and poids to numeric, handling potential issues with NA values
viandes1$Qtty_cons <- as.numeric(viandes1$Qtty_cons)
viandes1$poids <- as.numeric(viandes1$poids)
# Check for missing values in Qtty_cons and poids
if (any(is.na(viandes1$Qtty_cons))) {
stop("Qtty_cons column contains NA values after conversion to numeric.")
}
if (any(is.na(viandes1$poids))) {
stop("poids column contains NA values after conversion to numeric.")
}
# Calculate the total consumption in kg
viandes1$qtotale_conso <- viandes1$Qtty_cons * viandes1$poids / 1000
# Return the updated dataframe
return(viandes1)
viandes <- viandes1
}
# Example usage:
cereales <- qtty_achat(cereales)
merge_bases <- function(viandes) {
table_de_conversion <- read_delim(file.choose(), ";", show_col_types = FALSE)
merged <- merge(viandes, table_de_conversion, by = "interview__key", all.x = TRUE)
return(merged)
}
# Example usage:
cereales <- merge_bases(cereales)
# Example usage:
cereales <- merge_bases(cereales)
qtty_achat <- function(viandes){
#Importation de la base table de conversion
library(readr)
table_de_conversion <<- read_delim(file.choose(), ";")
#------------------Calcul de la quantité consommée en kg----------------------------------
viandes$real_id_cons <- paste(viandes[[3]], viandes$Unite_cons, viandes$Taille_cons)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
###Nous pouvons maintenant fusionner la base viandes et la base table_de_conversion par la variable real_id
viandes1 <- merge(viandes, table_de_conversion, by= "real_id_cons", all.x = TRUE)
###Nous pouvons à présent créer la variable qui va calculer la consommation totale
viandes1$Qtty_cons<- as.numeric(viandes1$Qtty_cons)
viandes1$poids<- as.numeric(viandes1$poids)
viandes1$qtotale_conso <-viandes1$Qtty_cons*viandes1$poids/1000
viandes <- viandes1
}
cereales <- read_dta("C:/Users/HP/OneDrive/1231116193333-Desktop/Desktop/ISEPcoursR2024/Exos_Céréales/cereales.dta")
cereales <- preparation_base(cereales)
cereales <- qtty_achat(cereales)
qtty_conso <- function(ehcvm){
#Importation de la base table de conversion
library(readr)
table_de_conversion <<- read_delim(file.choose(), ";")
#------------------Calcul de la quantité consommée en kg----------------------------------
viandes$real_id_cons <- paste(ehcvm[[3]], ehcvm$Unite_cons, ehcvm$Taille_cons)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
###Nous pouvons maintenant fusionner la base viandes et la base table_de_conversion par la variable real_id
ehcvm1 <- merge(ehcvm, table_de_conversion, by= "real_id_cons", all.x = TRUE)
###Nous pouvons à présent créer la variable qui va calculer la consommation totale
ehcvm1$Qtty_cons<- as.numeric(ehcvm1$Qtty_cons)
ehcvm1$poids<- as.numeric(ehcvm1$poids)
ehcvm1$qtotale_conso <-ehcvm1$Qtty_cons*ehcvm1$poids/1000
ehcvm <- ehcvm1
}
cereales <- qtty_conso(cereales)
ehcvm$real_id_cons <- paste(ehcvm[[3]], ehcvm$Unite_cons, ehcvm$Taille_cons)
qtty_conso <- function(ehcvm){
#Importation de la base table de conversion
library(readr)
table_de_conversion <<- read_delim(file.choose(), ";")
#------------------Calcul de la quantité consommée en kg----------------------------------
ehcvm$real_id_cons <- paste(ehcvm[[3]], ehcvm$Unite_cons, ehcvm$Taille_cons)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
###Nous pouvons maintenant fusionner la base viandes et la base table_de_conversion par la variable real_id
ehcvm1 <- merge(ehcvm, table_de_conversion, by= "real_id_cons", all.x = TRUE)
###Nous pouvons à présent créer la variable qui va calculer la consommation totale
ehcvm1$Qtty_cons<- as.numeric(ehcvm1$Qtty_cons)
ehcvm1$poids<- as.numeric(ehcvm1$poids)
ehcvm1$qtotale_conso <-ehcvm1$Qtty_cons*ehcvm1$poids/1000
return(ehcvm1)
}
cereales <- qtty_conso(cereales)
library(haven)
cereales <- read_dta("C:/Users/HP/OneDrive/1231116193333-Desktop/Desktop/ISEPcoursR2024/Exos_Céréales/cereales.dta")
View(cereales)
qtty_conso <- function(ehcvm){
#Importation de la base table de conversion
library(readr)
table_de_conversion <<- read_delim(file.choose(), ";")
#------------------Calcul de la quantité consommée en kg----------------------------------
ehcvm$real_id_cons <- paste(ehcvm[[3]], ehcvm$Unite_cons, ehcvm$Taille_cons)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
###Nous pouvons maintenant fusionner la base viandes et la base table_de_conversion par la variable real_id
ehcvm1 <- merge(ehcvm, table_de_conversion, by= "real_id_cons", all.x = TRUE)
###Nous pouvons à présent créer la variable qui va calculer la consommation totale
ehcvm1$Qtty_cons<- as.numeric(ehcvm1$Qtty_cons)
ehcvm1$poids<- as.numeric(ehcvm1$poids)
ehcvm1$qtotale_conso <-ehcvm1$Qtty_cons*ehcvm1$poids/1000
return(ehcvm1)
}
cereales <- preparation_base(cereales)
cereales <- qtty_conso(cereales)
preparation_base <- function(base_ehcvm) {
colnames(base_ehcvm)[4:14] <- c("AutresCereales","Qtty_cons",
"Unite_cons","Taille_cons",
"AutoCons","AutresProv",
"DernierAchat","Qtty_achat",
"Unite_achat","Taille_achat",
"Value_achat")
##Gestion des NA
##Suppression des ménages ne consommant pas de céréales
##Création d'une variable temporaire
base_ehcvm$t <- ifelse(is.na(base_ehcvm$Qtty_cons)==1,1,0)
##Suppression des ménages n'ayant pas déclaré les quantités consommées
base_ehcvm <- base_ehcvm[base_ehcvm$t==0,]
dim(base_ehcvm)
##Suppression de la variable temporaire
base_ehcvm$t <- NULL
return(base_ehcvm)
}
qtty_conso <- function(ehcvm){
#Importation de la base table de conversion
library(readr)
table_de_conversion <<- read_delim(file.choose(), ";")
#------------------Calcul de la quantité consommée en kg----------------------------------
ehcvm$real_id_cons <- paste(ehcvm[[3]], ehcvm$Unite_cons, ehcvm$Taille_cons)
table_de_conversion$real_id_cons <- paste(table_de_conversion$produitID, table_de_conversion$uniteID, table_de_conversion$tailleID)
###Nous pouvons maintenant fusionner la base viandes et la base table_de_conversion par la variable real_id
ehcvm1 <- merge(ehcvm, table_de_conversion, by= "real_id_cons", all.x = TRUE)
###Nous pouvons à présent créer la variable qui va calculer la consommation totale
ehcvm1$Qtty_cons<- as.numeric(ehcvm1$Qtty_cons)
ehcvm1$poids<- as.numeric(ehcvm1$poids)
ehcvm1$qtotale_conso <-ehcvm1$Qtty_cons*ehcvm1$poids/1000
return(ehcvm1)
}
